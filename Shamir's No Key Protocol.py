# -*- coding: utf-8 -*-
"""Shamir's No-Key Protocol.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vi-RIz55B6qblO6H2IU6zYAQ8OEsjKeQ
"""

# Membangkitkan library
import random
import sys
import sympy
from Crypto.Util.number import getPrime, isPrime, inverse, getStrongPrime
from Crypto.Random import get_random_bytes
from time import time

# Pengaturan awal
a = 0
b = 0
primebits = [512, 1024, 2048]
for bits in primebits:
    print(f"\nSimulasi untuk p dengan panjang {bits} bit:")
    K = 1111369

    # Menghitung waktu komputasi
    start_time = time()
    total = 0
    for i in range(1, 1000000):
        total += 1
    end_time = time()
    duration = end_time - start_time

    # Membangkitkan bilangan prima p
    p = getStrongPrime(bits, e=0, false_positive_prob=1e-06,randfunc=None)

    # Membangkitkan eksponen rahasia (a, b)
    while (sympy.gcd(a,p-1)!=1):
        a = random.randint(1, p-1)
    while (sympy.gcd(b,p-1)!=1):
        b = random.randint(1, p-1)

    # Simulasi protokol Shamir's No-Key
    A1 = pow(K, a, p)  # Langkah 1: A -> B
    B1 = pow(A1, b, p)  # Langkah 2: B -> A
    A2 = pow(B1, inverse(a, p-1), p)  # Langkah 3: A -> B
    K_recovered = pow(A2, inverse(b, p-1), p)  # Langkah 4: B memulihkan K


    # Validasi hasil
    print(f"""Kunci rahasia yang akan dikirim: {K}
    Bilangan prima yang dipublikasikan adalah p = {p}
    Kunci privat A adalah a = {a}
    Kunci privat B adalah b = {b}
    Nilai yang dikirim A ke B adalah A1 = {A1}
    Nilai yang dikirim B kembali ke A adalah B1 = {B1}
    Nilai yang dikirim A kembali ke B adalah A2 = {A2}
    Kunci yang dipulihkan oleh B adalah = {K_recovered}
    Waktu komputasi: {duration:.7f} detik
    Status: {'Message received!' if K == K_recovered else 'Seems there is a miscommunication'}""")